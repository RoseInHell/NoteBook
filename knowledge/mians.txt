小米项目：https://misssxiao.github.io/xiao/xiaomi.html
用户管理系统：https://misssxiao.github.io/xiao/dist/index.html
个人影院：https://misssxiao.github.io/xiao/privatecinema/index.html
购物街：https://misssxiao.github.io/xiao/supermall/index.html

解决移动端click有300ms的延迟,安装使用fastclick插件

首页跳转到详情页，轮播图片有的只加载了一张
详情页推荐不能点开

position的属性，inherit(继承父元素的position属性)，sticky(根据设置的top,left等属性，在其设置的范围内则没什么变化，如果当文本滚动的时候，超过其设置的值，就会让该元素固定在那里，跟fixed一样了，当文本又滚动回来后，回到了其设置的范围内，该元素又回到了其原来在文本的位置)
     设置sticky的元素不脱离文档流，仍然保留元素原本在文档流中的位置
元素固定的位置相对于离他最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，则相对于viewport来计算元素的位置

http2.0和http1.1的区别：以二进制格式解析，而1.1是基于文本协议的格式解析，2.0可以多路复用，header报头压缩，http2.0让服务器可以将响应主动推送到客户端缓存中

软件更新就用了websocket
	是一种协议，可以让我们建立客户端到服务器端的全双工通信，这就意味着服务器可以主动推送数据到客户端

es6( ECMAscript )就是对js的一个规范

Chrome（谷歌浏览器）：webkit内核    -webkit-          Firefox（火狐浏览器）：Gecko     -moz-
Safari（苹果浏览器）：webkit内核     -webkit-	        IE（IE浏览器）：Trident内核     -ms-
Opera（欧朋浏览器）：Presto内核    -o-

浏览器内核主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。
渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同
JS引擎则：解析和执行javascript来实现网页的动态效果

js单线程的原因就是避免dom渲染冲突

js基本数据类型：undefind, null, boolean, number, string  (es6新增)Symbol（创建后独一无二且不可变的数据类型）

null和undefind的区别： 两者都代表   空 或 没有值
        null是一个表示“无”的对象，使用typeof运算得到object，null 参与数值运算时其值会自动转换为 0 ，对象原型链的终点
	undefind类型，一个变量被声明了但没赋值，得到undefind，undefined参与任何数值计算时结果一定是NaN

数组常用的方法：toString()数组转为字符串，join()按指定的分隔符将数组转为字符串，concat()拼接多个数组，slice()截取
splice()删除指定片段数组，sort()排序,push()添加，pop()删除最后一个元素，shift(),unshift()删除/添加第一个元素，flat()扁平化数组，reduce()为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，includes('xxx')判断该数组是否有xxx值

对象原生的一些方法：object . keys({a:3})得到["a"] ,   object . values({a:3}) 得到 [3] ,object . entries({a:3})得到["a",3]

字符串常用的方法：toUpperCase(),toLowerCase()将英文变大写/变小写，charAt()获取指定字符，indexOf()查询指定字符
slice()，substring()截取字符串，replace()替换，match()查找匹配的字符串，返回一个数组，search()查找，没有返回-1，
split()把一个字符串分割成字符串数组

判断数据类型：typeof，instanceof前者直接显示数据类型，后者返回true/false，前者检测数组和对象时都返回object，后者检测数组是否为对象的时候也会返回true，需要用Array.isArray()来判断是不是数组，从而分辨数组和对象
Object.prototype.toString.call()可以判断数据的类型

浅拷贝和深拷贝：
      浅拷贝通过ES6新特性Object.assign()或扩展运算符...来实现，如果属性是基本类型就拷贝其值，引用类型拷贝内存地址
      深拷贝通过JSON.parse(JSON.stringify())来实现，这方法不能拷贝数据里的undefind/function/symbol，深拷贝将一个         对象从内存中完整拷贝一份出来，且修改新对象不会影响原对象

原型和原型链：
         原型：每个函数都有prototype(原型)属性，这属性是一个指针，指向一个对象，原型是用来给实例共享属性和方法的
         原型链：当访问一个对象的某个属性时，会先在对象本身查找，如果没有则会去构造函数的prototype，还没有就去                      构造函数的prototype的_proto_中查找，这样一层一层向上查找就形成一链式结构，即原型链

	javascript的每个对象都有一个prototype属性，我们称之为原型，而原型的值也是一个对象，这样就串联起来了一条原型链，原型链的链头就是object，他的prototype比较特殊，值为null

async和await：
	async用于申明一个function是异步的，用同步的方式去做异步，用async/await来做异步请求
	async表示一个async函数，await只能在async函数里面使用，不能单独使用
	async返回一个promise对象，await就是等待这个promise的返回结果后再继续执行
	await等待的是一个promise对象，后面必须跟一个promise对象，但是不必写then()，可以直接得到返回值
	await会阻塞代码，如果后面的请求不依赖前面的请求，最好不要用

html第一行标签!DOCTYPE不是html标签，它为浏览器提供一项信息声明，即html是用声明版本编写的
        严格模式：又称标准模式，指浏览器按照W3C来解析代码，呈现页面
        混杂模式：又称怪异模式，指浏览器按照自己的方式来解析代码，是一种比较宽松的向后兼容的方式来显示页面

前端页面由结构层(html或xhtml之类的标记语言创建，就是一些标签)，表示层(css)，行为层构成(js和DOM主宰的领域)

只有ie6能识别的css样式写法 _height:100px 前面加下划线，只有ie7能识别 *+height  IE6,IE7都能识别的写法 *height
导入样式，在style标签里写 @import url("文件名.css");也可以不在里面加引号，也可以直接这样@import  "文件名.css";
遍历数组的方法，for循环，forEach
	ES6的方法：some()，every()，for...in遍历，map，for of，filter()

左右布局：1，用float，用定位，一个左一个右
左右布局右边自适应：左右都加个向左浮动，左边给个固定宽度，右边width：calc（100% - 左边的固定宽度）
	                 左边浮动且给个固定宽度，右边不浮动，margin-left左边的宽度

html5新特性：1，标签语义化 如：header,footer， 2，视频(video)和音频(audio)，3，webstorage本地存储 
	     4,缓存，5，canvas绘图，SVG绘图
css3新特性：过渡transition，动画，阴影box-shadow，filter滤镜，弹性布局，盒子模型定义box-sizing，媒体查询
ES6新特性：const,let声明，模板字符串(反引号` `和${}拼接)，箭头函数 =>，默认参数(可以直接在函数的传值处写)
	解构赋值，promise，class类，扩展运算符...   set数据类型，map数据类型

flex属性:flex-direction(横向，纵向排布),flex-wrap(是否换行),justify-content(在主轴上对齐方式),
	align-items(交叉轴上对齐方式),align-content(多根轴线对齐方式)，order属性，数值越小的盒子排的越靠前

animation怎么暂停控制：通过js来动态添加animation-play-state: paused(暂停) |  running(播放)

call和apply：改变对象内部的指针，改变对象的this指向，不同之处，call能传递多个参数，apply只能传两个参数，第二个是数组

this关键字是函数执行过程中用于表示上下文的对象，传统的常规函数可以用call,apply和bind来改变他们的this值,箭头函数会隐式的绑定this，this所引用的是函数上下文，取决于函数是如何被调用的，而不是怎么被定义的

new操作符做了什么？1.创建了一个空对象2.设置原型链3.让函数的this指向obj，并执行函数4.判断函数返回值类型并返回

圣杯布局和双飞翼布局：两边顶宽，中间自适应的三栏布局，中间栏要放在文档流前面优先渲染
还可以采用flex布局，justify-content：space-between 两端对齐，中间自适应，div之间有间隔
	圣杯布局：将浏览器放大或缩小到一定程度会导致布局混乱，如中间div宽度小于左边div
	区别：圣杯布局将左右两个DIV用相对定位配合right和left属性，以便左右两栏div移动后不遮挡中间DIV
	          双飞翼布局为了让中间div内容不被遮挡，在中div里加个div用于放置内容，再在该div加margin-left,margin-right为左右两栏div留出位置

什么是媒体查询：通过查询当前属于哪种设备，让网页能够在不同的设备下正常浏览
         media属性，device-width，device-height设备屏幕宽高,orientation检查设备处于横向还是纵向,这些适用手机
         外联式： <link rel="stylesheet" type="text/css"  media="only screen and (max-width:420px)">
         内嵌式：@media screen and (max-width: 420px){}
         手机 <768px  平板>=768px   中等屏幕,电脑显示器  >=992px   大屏幕显示器 >=1200px

canvas与svg的区别：
          1，canvas画图基于像素点，是位图，如果进行放大或缩小会失真，svg基于图形，用html标签描绘形状，不会失真
          2，canvas在js中描绘，svg在html中绘制
          3，canvas支持的颜色比svg多
          4，canvas无法对已经绘制的图像进行修改，操作，svg可以获取标签进行操作

bootstrap栏栅格的24个或32个或更多是怎么做到的：通过重新编译其less或sass源码来修改12这个值	

清除浮动的方法：给父元素加overflow:hidden，给父元素加display:inline-block，给父元素也加浮动等

相对定位是相对其原来的位置定位
行内块元素同一行显示时有默认空隙怎么解决：给其父元素font-size:0px，，，或直接设置浮动

给DOM元素绑定事件的方法：在html标签中直接绑定，在js中获取相应元素后绑定，在js中使用addEventListener绑定

get和post的区别（简单说）：
        1，参数url，get可见,post不可见，2，数据传输上，get通过拼接url进行传递参数，post通过body传输参数
        3，缓存性，get可以缓存，post不可以，4，后退页面的反应，get页面后退没影响，post则会重新提交请求
        5，传输数据大小，get传输数据不超过2k~4k根据浏览器决定，post则根据配置文件设定，也可以无限大
        6，get比post更不安全，get参数直接暴露在url上

防抖节或节流：不希望在事件持续触发的过程中那么频繁地去执行函数就需要用到
      （防抖）就是指触发事件的 n 秒后函数执行一次，如果在 n 秒内又触发了事件 则会重新计算函数执行时间
      （节流）就是连续触发事件但在n秒内只会执行一次函数，,不像防抖,防抖一直触发事件，函数就不会执行，直到停止                      触发后才会执行一次函数（可以通过时间 戳或者定时器来实现）

var,let,const的区别，全局声明下var声明的会挂载在window上，其他不会，let,const不提升变量，会形成块级作用域，形成暂时性死区，不能重复声明同一变量，const声明时必须赋值,const定义的常量不能改变（数值，字符串，布尔值），  （定义的对象能改变）能用修改对象属性值的方法修改，但不能改变其指向
	变量不提升：要先声明再使用
	块级作用域：如（if,for,function等）这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在                                     声明之前就使用这些变量，就会报错(暂时性死区)
	
盒子模型：
      盒子模型基本概念有：内容（content）、内边距（padding）、边框（border）、外边距（margin）
      盒模型又分标准盒模型（W3C）和IE盒模型（IE8及以下），两者的区别就是标准盒的width（height）=content，IE盒       模型的width（height）=content + padding + border;
      怎么通过js去设置，获取对应盒模型的宽高，非IE浏览器window.getComputedStyle(element).width/height，IE浏览         器Div1.currentStyle.width，~~~还可以通过DOM节点的 style 样式获取

js三大事件：鼠标事件，键盘事件，html事件
	鼠标事件（click单击，dblclick双击，mousemove等鼠标移入移出）
	键盘事件（keydown按键按下，keyup按键抬起，keypress两者之间）
	html事件（load文档加载完毕，select选择文本内容，change改变内容，focus获取光标，resize网页窗口变化		            ，scroll滚动条）

闭包:有权访问另一个函数作用域的变量的函数
创建闭包最常见的方式，就是在一个函数内部创建另一个函数
闭包的缺点：占内存且得不到释放，影响网页性能
js闭包的作用，正常函数执行完后，里面的变量会被垃圾回收处理掉，但闭包可以让里的变量在执行完后不被回收处理掉
可以通过闭包来封装常量


js是单线程(同一个时间只能做一件事)，在js中分为同步任务和异步任务，所有同步任务都会在主线程上执行，形成一个执行栈，遇到同步就立即执行，遇到异步就调用异步函数发起异步请求，异步任务开始执行异步操作
      在主线程之外还有一个的消息队列，异步操作执行完后，就到消息队列中排队，在同步任务执行完毕后，js线程就会去      消息队列中按次序读取消息队列的任务
      在同一个事件循环内部，无论做多少操作，异步操作只会在执行栈执行完毕后才会被执行
	主线程不断重复的获取消息，执行消息这就叫做事件循环（Event loop），消息列队中每一条消息对应一个事件
      同时在异步的事件循环里边Js的任务类型分为两种：
	宏任务 (task) ：执行栈里的每一段被执行的代码就是一个宏任务，包括事件产生的回调执行，宏任务会在执行完	                      毕一段代码后先对dom进行一次渲染，然后再执行下一个宏任务
	微任务 (jobs) ：在宏任务执行完毕后立即执行的，他在dom重新渲染之前，所以微任务相对应于宏任务完成的		         要快
       script(整体代码)，定时器，延时器，主代码等是一个宏任务，promise，nextTick等是微任务

异步操作有：回调函数，事件监听，promise对象等
	回调函数：把函数A作为参数传递到函数B中,并且这个B执行A，A就叫回调函数，没有名称就叫匿名回调函数

promise是一个对象，从它可以获取异步操作的消息，Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败），只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态
	一旦新建它就会立即执行，无法中途取消
	错误无法在外部被捕捉到，只能在内部进行预判处理
	执行如何，监测起来很难
promise的优势在于可以在then方法中继续写promise对象并返回，然后继续调用then来进行回调操作，解决回调函数嵌套深维护难

能跨域访问外部资源的标签（资源类型有限制）：
        <script src="...">//跨域加载图片到本地执行
        <link href="..."> //css
        <img src="...">//图片
        <iframe src="...">//任意资源

由于浏览器同源策略，凡是发送请求url的协议，域名，端口三者之间任意一与当前地址不同即为跨域
跨域请求资源的方式：
	JSONP:主要通过动态插入一个script标签，浏览器对script的资源引用没有同源限制，同时资源加载到页面后会	                          立即执行，JSONP有回调函数
	           缺点：无法发送post请求，难确定jsonp的请求是否失败（大多数是结合超时来判断是否成功）
	Proxy代理：先将请求发送给后台服务器，通过服务器来发送请求，然后将结果传递给前端
               nginx代理
	CORS方法
	postMessage：HTML5引入的一个全新的API跨域文档通信，是window对象新增的一个window.postMessage	                      方法，允许跨域窗口通信，不论两个窗口是否同源

本地存储：
    cookie存储：服务器和客户端之间来回传送文本值的内置机制，服务器可以根据cookie追踪用户在不同页面的访问信息
	         数据小，限制在4KB，会消耗网络带宽，操作复杂，不加密有安全风险
    web storage存储：HTML5提供，localStorage和sessionStorage完全继承Storage API，存储大(至少5MB),信息不会被		   传送到服务器
	localStorage~~页面关闭时数据不会被删除,数据能被同源的窗口或标签页共享
	sessionStorage~~页面关闭数据会丢失，只在构建它的窗口或标签页内可见